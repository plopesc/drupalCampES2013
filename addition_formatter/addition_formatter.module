<?php

/**
 * @file
 * Defines addition formatter implementation.
 */

/**
 * Implements hook_field_formatter_info().
 */
function addition_formatter_field_formatter_info() {
  return array(
    'addition_formatter' => array(
      'label' => t('Addition Formatter'),
      'description' => t('Displays the result of the addition of all the field items'),
      'field types' => array('number_integer', 'number_decimal', 'number_float'),
      'settings' => array(),
    ),
    'addition_formatter_basic' => array(
      'label' => t('Addition Formatter Basic'),
      'description' => t('Displays the result of the addition of all the field items'),
      'field types' => array('number_integer', 'number_decimal', 'number_float'),
      'settings' => array(),
    ),
  );
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function addition_formatter_field_formatter_info_alter(&$info) {
  $info['addition_formatter']['settings'] = array(
    'thousand_separator' => ' ',
    'decimal_separator' => '.',
    'scale' => 2,
    'prefix_suffix' => TRUE,
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function addition_formatter_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  if ($display['type'] == 'addition_formatter') {
    $options = array(
      ''  => t('<none>'),
      '.' => t('Decimal point'),
      ',' => t('Comma'),
      ' ' => t('Space'),
    );
    $element['thousand_separator'] = array(
      '#type' => 'select',
      '#title' => t('Thousand marker'),
      '#options' => $options,
      '#default_value' => $settings['thousand_separator'],
    );

    $element['decimal_separator'] = array(
      '#type' => 'select',
      '#title' => t('Decimal marker'),
      '#options' => array('.' => t('Decimal point'), ',' => t('Comma')),
      '#default_value' => $settings['decimal_separator'],
    );
    $element['scale'] = array(
      '#type' => 'select',
      '#title' => t('Scale'),
      '#options' => drupal_map_assoc(range(0, 10)),
      '#default_value' => $settings['scale'],
      '#description' => t('The number of digits to the right of the decimal.'),
    );

    $element['prefix_suffix'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display prefix and suffix.'),
      '#default_value' => $settings['prefix_suffix'],
    );
  }
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function addition_formatter_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  if ($display['type'] == 'addition_formatter') {
    $summary = array();
    $summary[] = number_format(1234.1234567890, $settings['scale'], $settings['decimal_separator'], $settings['thousand_separator']);
    if ($settings['prefix_suffix']) {
      $summary[] = t('Display with prefix and suffix.');
    }

    return implode('<br />', $summary);
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function addition_formatter_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  if ($items) {
    $addition = 0;
    foreach ($items as $delta => $item) {
      $addition += $item['value'];
    }

    if ($display['type'] == 'addition_formatter') {
      // Process output value according to formatter settings.
      $output = number_format($addition, $settings['scale'], $settings['decimal_separator'], $settings['thousand_separator']);
      if ($settings['prefix_suffix']) {
        $prefixes = isset($instance['settings']['prefix']) ? array_map('field_filter_xss', explode('|', $instance['settings']['prefix'])) : array('');
        $suffixes = isset($instance['settings']['suffix']) ? array_map('field_filter_xss', explode('|', $instance['settings']['suffix'])) : array('');
        $prefix = (count($prefixes) > 1) ? format_plural($item['value'], $prefixes[0], $prefixes[1]) : $prefixes[0];
        $suffix = (count($suffixes) > 1) ? format_plural($item['value'], $suffixes[0], $suffixes[1]) : $suffixes[0];
        $output = $prefix . $output . $suffix;
      }
    }
    else{
      $output = $addition;
    }
    $element[0] = array('#markup' => $output);
  }

  return $element;
}
